{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","quote","author","img","class","appear","handleClick","bind","randomNum","Math","floor","random","randomQuotes","data","this","setState","window","addEventListener","id","className","onClick","TransitionGroup","CSSTransition","key","in","timeout","classNames","src","alt","href","React","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"muNAqFeA,E,kDA/Eb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,MAAO,GACPC,OAAQ,GACRC,IAAK,GACLC,MAAO,GACPC,QAAQ,GAEV,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBATP,E,0DAaZ,IAAMC,EAAYC,KAAKC,MAAsB,GAAhBD,KAAKE,UAE5BC,EAAeC,EAErBC,KAAKC,UAAS,SAACf,GAAD,MAAY,CACxBC,MAAOW,EAAaJ,GAAWP,MAC/BC,OAAQU,EAAaJ,GAAWN,OAChCC,IAAKS,EAAaJ,GAAWL,IAC7BC,MAAOQ,EAAaJ,GAAWJ,Y,0CAKjCY,OAAOC,iBAAiB,OAAQH,KAAKR,e,+BAIrC,OACE,yBAAKY,GAAG,YAAYC,UAAWL,KAAKd,MAAMI,OACxC,uBAAGc,GAAG,YAAYC,UAAU,iBAAiBC,QAASN,KAAKR,aAA3D,aAIA,kBAACe,EAAA,EAAD,CAAiBF,UAAU,iBACzB,kBAACG,EAAA,EAAD,CACEC,IAAKT,KAAKd,MAAMC,MAChBuB,GAAIV,KAAKd,MAAMK,OACfA,QAAQ,EACRoB,QAAS,IACTC,WAAW,QAGX,yBACEC,IAAK,YAAcb,KAAKd,MAAMG,IAC9Be,GAAG,MACHC,UAAU,MACVS,IAAKd,KAAKd,MAAMG,QAYtB,uBAAGe,GAAG,OAAOC,UAAU,cACpBL,KAAKd,MAAMC,OAGd,uBAAGiB,GAAG,UAAUJ,KAAKd,MAAME,QAE3B,uBACEgB,GAAG,cACHC,UAAU,8BACVU,KAAK,4BAHP,oB,GApEUC,IAAMC,WCOlBC,EAAcC,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB9C,QACfwC,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,aAAwB9C,OAAOkB,SAASL,MACpDkC,SAAW/C,OAAOkB,SAAS6B,OAIvC,OAGF/C,OAAOC,iBAAiB,QAAQ,WAC9B,IAAMqB,EAAK,UAAMwB,aAAN,sBAEP9B,IAgEV,SAAiCM,EAAOC,GAEtCyB,MAAM1B,EAAO,CACX2B,QAAS,CAAE,iBAAkB,YAE5BtB,MAAK,SAAAuB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C9B,UAAUC,cAAc8B,MAAM5B,MAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,MAAK,WAC7B3B,OAAOkB,SAASuC,eAKpBpC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAuB,CAAwBpC,EAAOC,GAI/BC,UAAUC,cAAc8B,MAAM5B,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OCrC/BE,K","file":"static/js/main.94da12be.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport data from \"./data.json\"; // data parsed by react - JSON.parse() not needed\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      quote: \"\",\n      author: \"\",\n      img: \"\",\n      class: \"\",\n      appear: true,\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    const randomNum = Math.floor(Math.random() * 31);\n\n    const randomQuotes = data;\n\n    this.setState((state) => ({\n      quote: randomQuotes[randomNum].quote,\n      author: randomQuotes[randomNum].author,\n      img: randomQuotes[randomNum].img,\n      class: randomQuotes[randomNum].class,\n    }));\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"load\", this.handleClick);\n  }\n\n  render() {\n    return (\n      <div id=\"quote-box\" className={this.state.class}>\n        <a id=\"new-quote\" className=\"btn btn--white\" onClick={this.handleClick}>\n          New Quote\n        </a>\n\n        <TransitionGroup className=\"img-container\">\n          <CSSTransition\n            key={this.state.quote}\n            in={this.state.appear}\n            appear={true}\n            timeout={1000}\n            classNames=\"fade\"\n          >\n            {/* production */}\n            <img\n              src={\"./Images/\" + this.state.img}\n              id=\"img\"\n              className=\"img\"\n              alt={this.state.img}\n            ></img>\n            {/* development */}\n            {/* <img\n              src={\"../Images/\" + this.state.img}\n              id=\"img\"\n              className=\"img\"\n              alt={this.state.img}\n            ></img> */}\n          </CSSTransition>\n        </TransitionGroup>\n\n        <p id=\"text\" className=\"top-margin\">\n          {this.state.quote}\n        </p>\n\n        <p id=\"author\">{this.state.author}</p>\n\n        <a\n          id=\"tweet-quote\"\n          className=\"btn btn--primary btn--white\"\n          href=\"twitter.com/intent/tweet\"\n        >\n          Tweet Quote\n        </a>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./sass/main.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}